name: Publish snapshots to maven

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 0.*
      - poc/release-improvement

jobs:
  build-and-publish-snapshots:
    strategy:
      fail-fast: false
    #if: github.repository == 'opensearch-project/opensearch-spark'
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v3
        id: checkout

      # Extract version from build.sbt file
      - name: Extract version from build.sbt
        id: extract_version
        run: |
          # Extract the version from build.sbt
          VERSION=$(grep -E 'ThisBuild / version := "[^"]+"' build.sbt | sed 's/.*"\(.*\)".*/\1/')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"

      # Capture the commit ID for metadata purposes
      - name: Set commit ID
        id: set_commit
        run: |
          COMMIT_ID=$(git log -1 --format='%H')
          echo "commit_id=${COMMIT_ID}" >> $GITHUB_OUTPUT
          echo "Using commit ID: ${COMMIT_ID}"

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11

      - name: Set up SBT
        uses: sbt/setup-sbt@v1

      - name: Publish to Local Maven
        run: |
          # Use -no-colors for cleaner logs
          sbt -no-colors clean standaloneCosmetic/publishM2
          sbt -no-colors clean sparkPPLCosmetic/publishM2
          sbt -no-colors clean sparkSqlApplicationCosmetic/publishM2
          
          # Verify the published artifacts have the correct version
          echo "Checking published artifacts:"
          find $HOME/.m2/repository/org/opensearch/ -name "*${{ steps.extract_version.outputs.version }}*" || echo "No artifacts found with the expected version"

      - uses: actions/checkout@v3
        with:
          repository: 'opensearch-project/opensearch-build-libraries'
          path: 'build'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.PUBLISH_SNAPSHOTS_ROLE }}
          aws-region: us-east-1

      - name: generate sha and md5
        run: |
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.pom" -type f`; do sha512sum "$i" | awk '{print $1}' >> "$i.sha512"; done
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.jar" -type f`; do sha512sum "$i" | awk '{print $1}' >> "$i.sha512"; done
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.pom" -type f`; do sha256sum "$i" | awk '{print $1}' >> "$i.sha256"; done
          for i in `find ${HOME}/.m2/repository/org/opensearch/ -name "*.jar" -type f`; do sha256sum "$i" | awk '{print $1}' >> "$i.sha256"; done

      - name: Install XML tools
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet jq

      - name: Publish snapshots to maven and update metadata
        run: |
          # Get credentials to upload files directly
          export SONATYPE_USERNAME=$(aws secretsmanager get-secret-value --secret-id maven-snapshots-username --query SecretString --output text)
          export SONATYPE_PASSWORD=$(aws secretsmanager get-secret-value --secret-id maven-snapshots-password --query SecretString --output text)
          echo "::add-mask::$SONATYPE_USERNAME"
          echo "::add-mask::$SONATYPE_PASSWORD"
          export SNAPSHOT_REPO_URL="https://aws.oss.sonatype.org/content/repositories/snapshots/"

          # Publish snapshots to maven
          cd build/resources/publish/
          cp -a $HOME/.m2/repository/* ./
          ./publish-snapshot.sh ./

          echo "Snapshot publishing completed. Now uploading commit ID metadata..."
          
          # For each project, create and upload a modified metadata file
          PROJECTS=("opensearch-spark-standalone_2.12" "opensearch-spark-ppl_2.12" "opensearch-spark-sql-application_2.12")
          CURRENT_VERSION="${{ steps.extract_version.outputs.version }}"
          COMMIT_ID="${{ steps.set_commit.outputs.commit_id }}"
          
          # Create a dictionary to store the actual artifact versions
          declare -A ACTUAL_VERSIONS
          
          for PROJECT in "${PROJECTS[@]}"; do
            echo "Processing metadata for ${PROJECT}"
          
            # Create a temporary metadata file with commit ID
            TEMP_DIR=$(mktemp -d)
            METADATA_FILE="${TEMP_DIR}/maven-metadata.xml"
          
            # Download the current metadata from the repository
            META_URL="https://aws.oss.sonatype.org/content/repositories/snapshots/org/opensearch/${PROJECT}/${CURRENT_VERSION}/maven-metadata.xml"
            echo "Downloading metadata from ${META_URL}"
          
            # Wait a bit to ensure the metadata file is available after publishing
            sleep 10
          
            curl -s -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" -o "${METADATA_FILE}" "${META_URL}"
          
            # Check if download was successful
            if [ -s "${METADATA_FILE}" ]; then
              echo "Successfully downloaded metadata file"
          
              # Extract the latest JAR version information
              LATEST_JAR_VERSION=$(xmlstarlet sel -t -v "//snapshotVersion[extension='jar' and not(classifier)]/value" "${METADATA_FILE}" | head -1)
              if [ -n "${LATEST_JAR_VERSION}" ]; then
                echo "Latest jar version for ${PROJECT}: ${LATEST_JAR_VERSION}"
                ACTUAL_VERSIONS["${PROJECT}"]="${LATEST_JAR_VERSION}"
              else
                echo "Warning: Could not find JAR version in metadata for ${PROJECT}"
              fi
          
              # Modify the metadata to include commit ID
              cp "${METADATA_FILE}" "${METADATA_FILE}.bak"
          
              awk -v commit="${COMMIT_ID}" '
                /<versioning>/ {
                  print $0
                  print "  <commitId>" commit "</commitId>"
                  next
                }
                {print}
              ' "${METADATA_FILE}.bak" > "${METADATA_FILE}"
          
              echo "Modified metadata content:"
              cat "${METADATA_FILE}"
          
              # Upload the modified metadata back
              echo "Uploading modified metadata to ${META_URL}"
              curl -v -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "${METADATA_FILE}" "${META_URL}"
            else
              echo "Failed to download metadata for ${PROJECT} or file is empty"
              echo "Checking if URL exists:"
              curl -I -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" "${META_URL}"
              echo "Will retry after 20 seconds..."
              sleep 20
          
              curl -s -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" -o "${METADATA_FILE}" "${META_URL}"
          
              if [ -s "${METADATA_FILE}" ]; then
                echo "Retry successful. Extracting latest JAR version..."
          
                # Extract the latest JAR version information after retry
                LATEST_JAR_VERSION=$(xmlstarlet sel -t -v "//snapshotVersion[extension='jar' and not(classifier)]/value" "${METADATA_FILE}" | head -1)
                if [ -n "${LATEST_JAR_VERSION}" ]; then
                  echo "Latest jar version for ${PROJECT}: ${LATEST_JAR_VERSION}"
                  ACTUAL_VERSIONS["${PROJECT}"]="${LATEST_JAR_VERSION}"
                else
                  echo "Warning: Could not find JAR version in metadata for ${PROJECT}"
                fi
          
                echo "Modifying metadata to include commit ID"
                cp "${METADATA_FILE}" "${METADATA_FILE}.bak"
          
                awk -v commit="${COMMIT_ID}" '
                  /<versioning>/ {
                    print $0
                    print "  <commitId>" commit "</commitId>"
                    next
                  }
                  {print}
                ' "${METADATA_FILE}.bak" > "${METADATA_FILE}"
          
                echo "Modified metadata content:"
                cat "${METADATA_FILE}"
          
                # Upload the modified metadata back
                echo "Uploading modified metadata to ${META_URL}"
                curl -v -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "${METADATA_FILE}" "${META_URL}"
              else
                echo "Failed again to download metadata for ${PROJECT}, skipping"
              fi
            fi
          
            # Clean up
            rm -rf "${TEMP_DIR}"
          done
          
          # Print all collected actual versions
          echo "Collected actual artifact versions:"
          for project in "${!ACTUAL_VERSIONS[@]}"; do
            echo "$project: ${ACTUAL_VERSIONS[$project]}"
          done

          # Create/update the global commit ID to version mapping file
          echo "Creating/updating commit ID to version mapping..."
          MAPPING_DIR=$(mktemp -d)
          MAPPING_FILE="${MAPPING_DIR}/commit-version-map.json"
          GROUP_PATH="org/opensearch"
          
          # Define the URL for the mapping file
          MAPPING_URL="${SNAPSHOT_REPO_URL}${GROUP_PATH}/commit-version-map-poc.json"
          
          # Try to download existing mapping file if it exists
          HTTP_CODE=$(curl -s -o "${MAPPING_FILE}" -w "%{http_code}" -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" "${MAPPING_URL}" || echo "000")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "Downloaded existing mapping file"
          else
            echo "No existing mapping file found, creating new one"
            echo '{"mappings":[]}' > "${MAPPING_FILE}"
          fi
          
          # Create JSON object with artifact versions
          ARTIFACTS_JSON="{"
          for project in "${!ACTUAL_VERSIONS[@]}"; do
            if [ "${ARTIFACTS_JSON}" != "{" ]; then
              ARTIFACTS_JSON="${ARTIFACTS_JSON},"
            fi
            ARTIFACTS_JSON="${ARTIFACTS_JSON}\"${project}\": \"${ACTUAL_VERSIONS[$project]}\""
          done
          ARTIFACTS_JSON="${ARTIFACTS_JSON}}"
          
          echo "Artifacts JSON: ${ARTIFACTS_JSON}"
          
          # Add new mapping entry
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Use temporary file for JSON manipulation
          TEMP_JSON="${MAPPING_DIR}/temp.json"
          
          # Use jq to add the new mapping
          cat "${MAPPING_FILE}" | jq --arg commit "$COMMIT_ID" \
                                    --arg version "$CURRENT_VERSION" \
                                    --arg timestamp "$TIMESTAMP" \
                                    --argjson artifacts "$ARTIFACTS_JSON" '
          if (.mappings | map(select(.commit_id == $commit)) | length) == 0 then
            .mappings += [{"commit_id": $commit, "version": $version, "timestamp": $timestamp, "artifacts": $artifacts}]
          else
            .mappings = [.mappings[] | if .commit_id == $commit then . + {"artifacts": $artifacts} else . end]
          end
          ' > "${TEMP_JSON}"
          
          mv "${TEMP_JSON}" "${MAPPING_FILE}"
          
          # Sort mappings by timestamp (newest first) for easier lookup
          cat "${MAPPING_FILE}" | jq '.mappings |= sort_by(.timestamp) | .mappings |= reverse' > "${TEMP_JSON}"
          mv "${TEMP_JSON}" "${MAPPING_FILE}"
          
          # Print the updated mapping for debugging
          echo "Updated mapping file content:"
          cat "${MAPPING_FILE}"
          
          # Upload the mapping file
          echo "Uploading mapping file to ${MAPPING_URL}"
          curl -v -u "${SONATYPE_USERNAME}:${SONATYPE_PASSWORD}" --upload-file "${MAPPING_FILE}" "${MAPPING_URL}"
          
          # Clean up
          rm -rf "${MAPPING_DIR}"